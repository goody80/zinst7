#!/bin/bash   
# Package install manager
# Made by Ralf Yang
# goody80762@gmail.com
export TIME_STYLE="+%b %d %R"
Barr="==========================================================================="
BARR="###########################################################################"
ROWW="============================================================="

source ./conf/zinst.conf

### Exception for Docker user
### Docker user can changes the hosts-file to the other hosts-file  as below solution
## RUN cp /etc/hosts /etc/hostsa
## RUN mkdir -p -- /lib-override && cp /lib64/libnss_files.so.2 /lib-override
## RUN sed -i 's:/etc/hosts:/etc/hostsa:g' /lib-override/libnss_files.so.2
## ENV LD_LIBRARY_PATH /lib-override

## Base information
VERSION=7.0.3
zinst_group="wheel"
sudo_base="sudo"
zinst_log="/dev/null"
#Sara_Host=""

OS_Checker(){
	source ./src/OS_Checker
}

OS_Checker

System_Controller_checker(){
	source ./src/System_Controller_checker
}
System_Controller_checker

Select_OS(){
	source ./src/Select_OS
}
Select_OS $OS_name

# receive the OS type to URL
Dist_URL="$Dist_server$OS_type"


Requires_Pkg_install(){
	source ./src/Requires_Pkg_install
}


Check_command_install(){
	source ./src/Check_command_install
}

Check_command_install $OS_name

## Requires command check & install
Requires_Pkg_install sudo
Requires_Pkg_install tar bc 


HostsFile="/etc/hostsa"
	if [[ ! -f $HostsFile ]];then
		HostsFile="/etc/hosts"
	fi

hosts_redefine(){
	source ./src/hosts_redefine
}

FetchedDistServer=`echo $Dist_server | sed -e "s#http://##g"`
GrepDistHost=`grep "$FetchedDistServer" $HostsFile`
	if [[ $GrepDistHost = "" ]];then
		$sudo_base bash -c "echo $ManagerIP $FetchedDistServer >> $HostsFile"
	else
		DistResut=`echo "$GrepDistHost" | awk '{print $1}'`
		if [[ $DistResut != $ManagerIP ]];then
			hosts_redefine 
		fi
	fi


version_redefine (){ 
	source ./src/version_redefine
}


exit_abnormal() {
	source ./src/exit_abnormal
}

### Break sign catch for line break fix
trap exit_abnormal SIGINT SIGTERM SIGKILL


### Requires server_default_setup package for the account policy
WhoStamp=`$sudo_base cat $ZinstBaseRoot/src/_tmp_acc 2> $zinst_log`
	if [[ $WhoStamp = "" ]]
	then
		WhoStamp=`whoami`
	fi

$sudo_base rm $ZinstBaseRoot/src/_tmp_acc 2> $zinst_log
export ZinstDir=$ZinstBaseRoot
CurrPkgDiR="$ZinstBaseRoot/vault/zinst/index"
WhoStamps=`printf "%-14s" "$WhoStamp"`

### Config about of Save file
Save_Dir="$ZinstBaseRoot/z/save"
Save_Filename="zinst-save"
CheckSaveDir=`ls $ZinstBaseRoot/z 2> $zinst_log |grep save`
	if [[ $CheckSaveDir = "" ]]
	then
		$sudo_base mkdir -p $Save_Dir
		$sudo_base chgrp $zinst_group $Save_Dir
	fi

Log_History_dir(){
	source ./src/Log_History_dir
}
Log_History_dir

Pass_Checker() {
        source ./src/Pass_Checker
}

Daemon_list(){
        source ./src/Daemon_list
}

## Parsing!!!   importatant area
Parser_engine(){
	source ./src/Parser_engine
}
PackageAll=$@
Parser_engine $PackageAll


### History File reset for permission
$sudo_base chmod 664 $History_LOG 2> $zinst_log
$sudo_base chgrp $zinst_group $History_LOG 2> $zinst_log

Package_Parse_Check(){
	source ./src/Package_Parse_Check
}


PrintCheck(){
	source ./src/PrintCheck
}


### Multi file copier command
	if [[ $CommandX = "mcp" ]]; then
		if [[ $ZHosts != "" ]];	then
			TargetDir=`echo $ZPackages | awk '{print $NF}'`
			Source=`echo $ZPackages | awk '{for (i=1;i<NF;i=i+1) print $i}'`
			SourceNum=`echo $Source | awk '{print NF}' `
			HostNum=`echo $ZHosts | awk '{print NF}'`
			Hcount=1
				while [[ $Hcount -le $HostNum ]]
				do
					TartgetHost=`echo $ZHosts | awk '{print $'$Hcount'}'`
					echo ""
					echo "[:: $TartgetHost  ::]"		
					Scount=1
						while [[ $Scount -le $SourceNum ]];	do
							PartedSource=`echo $Source |awk '{print $'$Scount'}'`
							Check_Files=`ls $PartedSource`
								if [[ $Check_Files != $PartedSource  ]]
								then
									echo " =============  $PartedSource File not exist ============="
									exit 0;
								fi
							$Comm_sshpass scp $PartedSource $TartgetHost:$TargetDir	
							let Scount=Scount+1
						done
					let Hcount=Hcount+1
					Localhost=$HOSTNAME
					Command_p="> mcp"
					SourceFull=(`echo "$Source"`)
					IPaddr=`/sbin/ifconfig |grep " addr:" |grep Bcast |head -1 | awk '{print $2}'|awk  -F ':' '{print $2}'`
					$Comm_sshpass ssh -oStrictHostKeyChecking=no $TartgetHost "echo -e \"`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - From $IPaddr:  ${SourceFull[@]} -> $TargetDir \" >> $History_LOG"
				done
		else
			echo "$ROWW"
			echo " Hostname requires"
			echo "$ROWW"
		fi
		exit 0;
	fi

	CheckRB=`echo "$CommandX" |grep "sync"`
	if [[ $CheckRB != "" ]]; then
		if [[ $ZHosts != "" ]]; then
			TargetDir="~/"
			Source=`echo $ZPackages | awk '{print $1}'`
			HostNum=`echo $ZHosts | awk '{print NF}'`
			Hcount=1
				while [[ $Hcount -le $HostNum ]];do
					TartgetHost=`echo $ZHosts | awk '{print $'$Hcount'}'`
					echo ""
					echo "[:: $TartgetHost ::]"		
					Scount=1
					$Comm_sshpass scp $ZPackages $TartgetHost:~/ 2> $zinst_log
					let Hcount=Hcount+1
					Localhost=$HOSTNAME
					Command_p="> Sent a sync file"
					SourceFull=(`echo "$Source"`)
					IPaddr=`/sbin/ifconfig |grep " addr:" |grep Bcast |head -1 | awk '{print $2}'|awk  -F ':' '{print $2}'`
					$Comm_sshpass ssh -oStrictHostKeyChecking=no $TartgetHost "echo -e \"`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - From $IPaddr:  $SourceFull -> $TargetDir \" >> $History_LOG"
				done
		fi
	fi


## Function for ssh key deply to the servers
    if [[ $CommandX = keydep* ]]; then
        if [[ $ZHosts != "" ]]; then
            TargetDir=`echo $ZPackages | awk '{print $NF}'`
            Source=`echo $ZPackages | awk '{for (i=1;i<NF;i=i+1) print $i}'`
            HostNum=`echo $ZHosts | awk '{print NF}'`
			UserID=`whoami`
			#AuthKey="$ZinstBaseRoot/var/authorized_keys"
				if [[ $UserID = "root" ]];then
					AuthKey="/root/authorized_keys"
				else
					AuthKey="/home/$UserID/authorized_keys"
				fi
				if [[ ! -f $AuthKey ]]; then
				    sudo touch $AuthKey
				fi
			PUBKEY=`cat $AuthKey 2> /dev/null`
				if [[ $PUBKEY = "" ]];then
				    echo $Barr
				    echo " Please insert a public key to $AuthKey !!!"
                	echo $Barr
				    exit 0
				fi
				if [[ `(zinst ls sshpass)` = "" ]];then
					zinst i sshpass -stable
				fi
            Hcount=1
                while [[ $Hcount -le $HostNum ]];  do
                    TartgetHost=`echo $ZHosts | awk '{print $'$Hcount'}'`
                    echo ""
                    echo "[:: $TartgetHost  ::]"        
					TartgetHost=`echo $ZHosts | awk '{print $'$Hcount'}'`
					$Comm_sshpass ssh -T -oStrictHostKeyChecking=no $UserID@$TartgetHost <<EOF1
						if [ ! -e "~/.ssh" ]; then
							mkdir ~/.ssh  2> /dev/null
						fi
						umask 022
						echo "$PUBKEY" > ~/.ssh/authorized_keys
EOF1
					let Hcount=Hcount+1
					Localhost=$HOSTNAME
					Command_p="> Key Deploy"
					SourceFull=(`echo "$Source"`)
					IPaddr=`/sbin/ifconfig |grep " addr:" |grep Bcast |head -1 | awk '{print $2}'|awk  -F ':' '{print $2}'`
					$Comm_sshpass ssh -oStrictHostKeyChecking=no $TartgetHost "echo -e \"`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - From $IPaddr:  ${SourceFull[@]} -> $TargetDir \" >> $History_LOG"
				done
		else
			echo "$ROWW"
			echo " Hostname requires"
			echo "$ROWW"
		fi
		exit 0;
	fi


#########################################################################################
############################# zinst re-org engine start #################################
################################# Hostlist checker ######################################
RotaCommand=$Allcommand
szinst="zinst"
RotaBeacon=0
	if [[ $ZHosts != "" ]]
	then 
		Count=0
		Max=${#HostChanged[@]}
			while [[ $Count -lt $Max ]];
			do
				HostF=$WhoStamp@${HostChanged[$Count]}
				## ssh connection check
				$Comm_sshpass ssh -oStrictHostKeyChecking=no $HostF "grep ^VERSION /usr/bin/zinst" > $ZinstBaseRoot/vault/Source/ssh_conn_test.log 2>&1
				CheckConnection=`$sudo_base cat $ZinstBaseRoot/vault/Source/ssh_conn_test.log |grep "No route\|not known\|Connection refused"`
					if [[ $CheckConnection != "" ]]
					then
						echo $Barr	
						echo "It couldn't connect this host($HostF). Please check this hostname"
						echo $Barr	
					else
						## Install start with target host ##
						## Check the Package or Distribution server
						## Package scp to destination
						zinst_checkDes=`$sudo_base grep ^VERSION $ZinstBaseRoot/vault/Source/ssh_conn_test.log | sed -e 's/VERSION=//g' 2> $zinst_log`
							if [[ $zinst_checkDes != "" ]]
							then
								zinst_checkLoc=`$sudo_base cat /usr/bin/zinst 2> $zinst_log |grep ^VERSION | sed -e 's/VERSION=//g'`
									if [[ $(version_redefine "$zinst_checkDes") < $(version_redefine "$zinst_checkLoc") ]];
									then
										$Comm_sshpass scp /usr/bin/zinst $HostF:/usr/bin
									fi
							else
								$Comm_sshpass scp /usr/bin/zinst $HostF:/usr/bin/ 2> $zinst_log
							fi

						#### Check SSH command ########
							if [[ $CommandX = "ssh" ]]
							then
								RotaCommand=$MidPackageArry
								szinst=""
							fi

						CheckDesDIR=`$sudo_base grep " cannot access " $ZinstBaseRoot/vault/Source/ssh_conn_test.log`
							if [[ $CommandX != "" ]]
							then		
	        						$Comm_sshpass ssh -oStrictHostKeyChecking=no -t $HostF "$sudo_base mkdir -p $ZinstBaseRoot/vault/Source;sudo chgrp -R $zinst_group $ZinstBaseRoot/vault" 2> $zinst_log
							fi

        					echo ""
						## Delete temporary connection checker file
     						$sudo_base rm -f $ZinstBaseRoot/vault/Source/ssh_conn_test.log
						#### Local package scp to destination ####
						LocalPkg=`echo $RotaCommand | sed -e 's/^[a-z]* //g'`
						LocalPkg_Num=`echo $LocalPkg | awk '{print NF}'`

						CountSub=1
							while [[ $CountSub -le $LocalPkg_Num ]]
							do
								LocalRealPkg=`echo $LocalPkg | awk '{print $'$CountSub'}'`
									if [[ $CommandX = "^ssh$" ]]
									then
										LocalPkg_chk=`cd $PWD;ls |grep "^$LocalRealPkg"`
									fi

									if [[ $LocalPkg_chk != "" ]]
									then
										$Comm_sshpass scp $LocalRealPkg $HostF:$ZinstSourceDir/
									fi

								let CountSub=CountSub+1
							done;

							#### Check set command for destination work ########
							if [[ $RotaBeacon = 0 ]];then
								if [[ $CommandX = "set" ]]
								then
									RotaCommand=`echo $RotaCommand | sed -e 's/ \-set//1'`
									RotaBeacon=1
								fi
							fi

						MultiCheck=`echo $ZOptions |grep -e "-multi"`
							if [[ $MultiCheck = "" ]]
							then
								$Comm_sshpass ssh -oStrictHostKeyChecking=no -t $HostF "echo [ :: $HostF :: ];cd $ZinstSourceDir; source /etc/profile ;$szinst $RotaCommand" 2> $zinst_log
								IPaddr=`/sbin/ifconfig |grep " addr:" |grep Bcast |head -1 | awk '{print $2}'|awk  -F ':' '{print $2}'`
									if [[ $szinst = "" ]];then
										DestStamp="> SSH -"
									else
										DestStamp=" L"
									fi

 							    $Comm_sshpass ssh -oStrictHostKeyChecking=no -t $HostF "echo -e \"`date +%Y.%m.%d_%T`\t $WhoStamps : $DestStamp From $IPaddr: $szinst $RotaCommand\" >> $History_LOG" 
							else
								$Comm_sshpass ssh -oStrictHostKeyChecking=no -t $HostF "echo [ :: $HostF :: ];cd $ZinstSourceDir; source /etc/profile ;$szinst $RotaCommand" & 
							fi

					fi
				let Count=Count+1
			done
		exit 0;
	fi

Package_Array_Sort(){
	source ./src/Package_Array_Sort
}

#########################################################################################
############################# zinst re-org engine end ###################################

## Package Version making auto
StableOptionCheck=`echo "${PackageArryOption[@]}" |grep "\-stable"`
	CheckCommandX=`echo $CommandX |egrep "^i"`
	if [[ $CheckCommandX != "" ]]
	then
		if [[ $StableOptionCheck != "" ]]
		then
			echo ""
			echo $Barr
			Package_Array_Sort $ZPackages
			ProcessPkg=$AllPkgSortedResult
		fi
	fi

 

Save_Restore_file(){
	source ./src/Save_Restore_file
}

Pkg_Install(){
	source ./src/Pkg_Install
}

Pkg_Set() {
	source ./src/Pkg_Set
}

Pkg_Remove(){
	source ./src/Pkg_Remove
}

Pkg_List(){
	source ./src/Pkg_List
}

Pkg_Find(){
	source ./src/Pkg_Find
}

Cront_Command(){
	source ./src/Cront_Command
}

Pkg_Restore(){
	source ./src/Pkg_Restore
}

Pkg_Sync(){
	source ./src/Pkg_Sync
}

Daemon_Control(){
	source ./src/Daemon_Control
}

Zinst_Version(){
 echo "Zinst version" `$sudo_base cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'`
}

Zinst_SelfConfig(){
	source ./src/Zinst_SelfConfig
}

Zinst_Selfupdate(){
	source ./src/Zinst_Selfupdate
} 

Help_Command(){
	source ./src/Help_Command
}

Help_Detail(){
	source ./src/Help_Detail
}


History(){
	source ./src/History
}

Pkg_Track(){
	source ./src/Pkg_Track
}


check_vminit(){
		echo "Check the initialized VM"
		vm_imagename=$1
}

Init_Virtual(){
		$sudo_base yum groupinstall "Virtualization*" # && [Virshfile create] 

}

Add_Virtual(){
		check_vminit

}

Up_Virtual(){
		check_vminit
		$sudo_base virsh start $vm_imagename
}

Halt_Virtual(){
		check_vminit
		$sudo_base virsh shutdown $vm_imagename
}

Destroy_Virtual(){
		check_vminit
		$sudo_base virsh destroy $vm_imagename
		$sudo_base virsh undefine $vm_imagename
		$sudo_base rm -f #$vm_dir $vm_imagename.qcow2
}


Vmlist_Virtual(){
		check_vminit
		$sudo_base virsh list all
}


Pkg_Getset(){
	source ./src/Pkg_Getset
}

##############################  Command menu  ###################################
	case "$CommandX" in
	i)
		Pkg_Install $* 	;;
	inst*)
		Pkg_Install $* 	;;
	set)
		Pkg_Set $*	;;
	gets*)
		Pkg_Getset $*	;;
	r*m*)
		Pkg_Remove $*	;;
	start)
		Daemon_Control $*	;;
	stop)
		Daemon_Control $*	;;
	run)
		Daemon_Control $*	;;
	reload)
		Daemon_Control $*	;;
	restart)
		Daemon_Control $*	;;
	on)
		Daemon_Control $*	;;
	off)
		Daemon_Control $*	;;
	his*)
		History	;;
	self-up*)
		Zinst_Selfupdate ;;
	self-conf*)
		Zinst_SelfConfig ;;
	cront*)
		Cront_Command $* ;;
	l*s*)  
		Pkg_List $*	;;
	sync*)
		Pkg_Sync $*	;;
	restore)
		Pkg_Restore $*	;;
	find)
		Pkg_Find $*	;;
	track)
		Pkg_Track $* ;;
	daemon*)
		Daemon_list $2;;
	-v*)
		Zinst_Version 	;;
	*help)
		Help_Detail	;;
	init)
		Init_Virtual ;;
	vms)
		Vmlist_Virtual ;;
	add)
		Add_Virtual ;;
	destroy)
		Destroy_Virtual ;;
	up)
		Up_Virtual ;;
	halt)
		Halt_Virtual ;;
	*)
		Help_Command	;;
	esac
